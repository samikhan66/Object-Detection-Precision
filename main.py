""" PRECISION SCRIPT USED TO MEASURE PRECISION OF COMMON OBJECT DETECTION ITEMS FOR TENSORFLOW OBJECT DETECTION API
Written by Sami Khan
February 2020
ALL RIGHTS RESERVED
Reach out to me on msamikhhan@gmail.com if you have any questions or bugs or if you want to contribute
 """


import os
import find_precision
from find_precision import (compare_coordinates, write_csv_one_bottle_one_vase, 
parse_xml, write_csv_two_bottle_one_vase, write_csv_two_bottle_two_vase)
import ml
import csv
import cv2
import pandas as pd 
import numpy as np

#this protobuf file is the inference graph generated by TensorFlow Object Detection API.
FROZEN_INFERENCE_GRAPH_LOC = os.getcwd() + "/inference_graph/common_objects.pb"
detection_graph = test_ml.load_graph(FROZEN_INFERENCE_GRAPH_LOC)

TEST_IMAGE_DIR = os.getcwd() +  "/testing_images_precision"

#This dictionary needs to be changed according to the the items you have.
#If this item occurs only once, add one for the corresponding key
#If this item occurs twice, add the confidence threshold you want (should be a percentage)
ATTRIBUTES = {"cup": 1,
				"laptop": 1,
				"bottle": 0.5,
				"wine_glass": 0.5,
				"handbag": 1, 
				"dining_table": 1, 
				"mouse": 1, 
				"vase": 1
				}
SINGLE_ATTRIBUTES_LIST = [k for k,v in ATTRIBUTES.items() if v == 1]
DOUBLE_ATTRIBUTES_DIC = {}
for k,v in ATTRIBUTES.items():
	if type(v) == float:
		DOUBLE_ATTRIBUTES_DIC[k] = v 
with open("test_results.csv", "w") as file:
	writer = csv.DictWriter(file, fieldnames = ["filename", 
		"chair_precision", "laptop_precision",
	"bottle_1_precision", "bottle_2_precision",
	 "wine_glass_1_precision", "wine_glass_2_precision",
	 "handbag_precision", "dining_table_precision", "mouse_precision",
	  "vase_precision", "mean"])	
	writer.writeheader()

	for files in os.listdir(TEST_IMAGE_DIR):
		if os.path.splitext(files)[-1].lower() == ".jpg":
			print(files)
			file_dirpath = os.path.join(TEST_IMAGE_DIR, files)
			xml_dirpath = os.path.join(TEST_IMAGE_DIR, (files.split(".")[0]+ ".xml"))
			true_dic = parse_xml(xml_dirpath, ATTRIBUTES, SINGLE_ATTRIBUTES_LIST) 
			image_np = cv2.imread(file_dirpath)
			temp_image = image_np.copy()
			if image_np is None:
				print("error reading file " + file_dirpath)
				continue

			predicted_dic = (test_ml.get_regions(ATTRIBUTES, SINGLE_ATTRIBUTES_LIST,
			 DOUBLE_ATTRIBUTES_DIC, temp_image, detection_graph))
			
			test_ml.draw_boxes(ATTRIBUTES, SINGLE_ATTRIBUTES_LIST,
			 DOUBLE_ATTRIBUTES_DIC, temp_image, file_dirpath, predicted_dic)

			precision_dic = compare_coordinates(SINGLE_ATTRIBUTES_LIST,
												 true_dic, predicted_dic)

			bottle = precision_dic["bottle"]
			wine_glass  = precision_dic["wine_glass"]

			if bottle is not None and wine_glass is not None:
				if len(bottle) == 1 and len(wine_glass) == 1:
					writer.writerow(write_csv_one_bottle_one_vase(files, precision_dic))
				elif len(bottle) == 2 and len(wine_glass) == 1:
					writer.writerow(write_csv_two_bottle_one_vase(files, precision_dic))

				elif len(bottle) == 2 and len(wine_glass) == 2:
					writer.writerow(write_csv_two_bottle_two_vase(files, precision_dic))


df = pd.read_csv("test_results.csv", header = 0)
df = df.fillna(np.nan)
df['mean'] = round(df.mean(axis=1), 1)



"""Uncomment if it needs to be applied """
### functionality for copying bad files to a folder ###
# threshold = 90
# root = os.getcwd()
# if df['mean'].astype(int).item() <= threshold:
# 	dst_dir = os.path.join(root,"bad_files")
# 	if not os.path.exists(dst_dir):
# 		os.mkdir(dst_dir)
# 	src_file = os.path.join(TEST_IMAGE_DIR, df['filename'].astype(str).item())

# 	shutil.copy(src_file, dst_dir)	

df.to_csv("test_results.csv", index = False)
print(df.describe())
